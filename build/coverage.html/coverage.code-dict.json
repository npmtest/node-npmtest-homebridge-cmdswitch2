{"/home/travis/build/npmtest/node-npmtest-homebridge-cmdswitch2/test.js":"/* istanbul instrument in package npmtest_homebridge_cmdswitch2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-cmdswitch2/lib.npmtest_homebridge_cmdswitch2.js":"/* istanbul instrument in package npmtest_homebridge_cmdswitch2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_cmdswitch2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_cmdswitch2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-cmdswitch2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-cmdswitch2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_cmdswitch2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_cmdswitch2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_cmdswitch2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_cmdswitch2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_cmdswitch2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_cmdswitch2.__dirname + '/lib.npmtest_homebridge_cmdswitch2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-cmdswitch2/node_modules/homebridge-cmdswitch2/index.js":"var exec = require(\"child_process\").exec;\r\nvar Accessory, Service, Characteristic, UUIDGen;\r\n\r\nmodule.exports = function (homebridge) {\r\n  Accessory = homebridge.platformAccessory;\r\n  Service = homebridge.hap.Service;\r\n  Characteristic = homebridge.hap.Characteristic;\r\n  UUIDGen = homebridge.hap.uuid;\r\n\r\n  homebridge.registerPlatform(\"homebridge-cmdswitch2\", \"cmdSwitch2\", cmdSwitchPlatform, true);\r\n}\r\n\r\nfunction cmdSwitchPlatform(log, config, api) {\r\n  this.log = log;\r\n  this.config = config || {\"platform\": \"cmdSwitch2\"};\r\n  this.switches = this.config.switches || [];\r\n\r\n  this.accessories = {};\r\n  this.polling = {};\r\n\r\n  if (api) {\r\n    this.api = api;\r\n    this.api.on('didFinishLaunching', this.didFinishLaunching.bind(this));\r\n  }\r\n}\r\n\r\n// Method to restore accessories from cache\r\ncmdSwitchPlatform.prototype.configureAccessory = function (accessory) {\r\n  this.setService(accessory);\r\n  this.accessories[accessory.context.name] = accessory;\r\n}\r\n\r\n// Method to setup accesories from config.json\r\ncmdSwitchPlatform.prototype.didFinishLaunching = function () {\r\n  // Add or update accessories defined in config.json\r\n  for (var i in this.switches) this.addAccessory(this.switches[i]);\r\n\r\n  // Remove extra accessories in cache\r\n  for (var name in this.accessories) {\r\n    var accessory = this.accessories[name];\r\n    if (!accessory.reachable) this.removeAccessory(accessory);\r\n  }\r\n}\r\n\r\n// Method to add and update HomeKit accessories\r\ncmdSwitchPlatform.prototype.addAccessory = function (data) {\r\n  this.log(\"Initializing platform accessory '\" + data.name + \"'...\");\r\n\r\n  // Retrieve accessory from cache\r\n  var accessory = this.accessories[data.name];\r\n\r\n  if (!accessory) {\r\n    // Setup accessory as SWITCH (8) category.\r\n    var uuid = UUIDGen.generate(data.name);\r\n    accessory = new Accessory(data.name, uuid, 8);\r\n\r\n    // Setup HomeKit switch service\r\n    accessory.addService(Service.Switch, data.name);\r\n\r\n    // New accessory is always reachable\r\n    accessory.reachable = true;\r\n\r\n    // Setup listeners for different switch events\r\n    this.setService(accessory);\r\n\r\n    // Register new accessory in HomeKit\r\n    this.api.registerPlatformAccessories(\"homebridge-cmdswitch2\", \"cmdSwitch2\", [accessory]);\r\n\r\n    // Store accessory in cache\r\n    this.accessories[data.name] = accessory;\r\n  }\r\n\r\n  // Confirm variable type\r\n  data.polling = data.polling === true;\r\n  data.interval = parseInt(data.interval, 10) || 1;\r\n  if (data.manufacturer) data.manufacturer = data.manufacturer.toString();\r\n  if (data.model) data.model = data.model.toString();\r\n  if (data.serial) data.serial = data.serial.toString();\r\n\r\n  // Store and initialize variables into context\r\n  var cache = accessory.context;\r\n  cache.name = data.name;\r\n  cache.on_cmd = data.on_cmd;\r\n  cache.off_cmd = data.off_cmd;\r\n  cache.state_cmd = data.state_cmd;\r\n  cache.polling = data.polling;\r\n  cache.interval = data.interval;\r\n  cache.manufacturer = data.manufacturer;\r\n  cache.model = data.model;\r\n  cache.serial = data.serial;\r\n  if (cache.state === undefined) {\r\n    cache.state = false;\r\n    if (data.off_cmd && !data.on_cmd) cache.state = true;\r\n  }\r\n\r\n  // Retrieve initial state\r\n  this.getInitState(accessory);\r\n\r\n  // Configure state polling\r\n  if (data.polling && data.state_cmd) this.statePolling(data.name);\r\n}\r\n\r\n// Method to remove accessories from HomeKit\r\ncmdSwitchPlatform.prototype.removeAccessory = function (accessory) {\r\n  if (accessory) {\r\n    var name = accessory.context.name;\r\n    this.log(name + \" is removed from HomeBridge.\");\r\n    this.api.unregisterPlatformAccessories(\"homebridge-cmdswitch2\", \"cmdSwitch2\", [accessory]);\r\n    delete this.accessories[name];\r\n  }\r\n}\r\n\r\n// Method to setup listeners for different events\r\ncmdSwitchPlatform.prototype.setService = function (accessory) {\r\n  accessory.getService(Service.Switch)\r\n    .getCharacteristic(Characteristic.On)\r\n    .on('get', this.getPowerState.bind(this, accessory.context))\r\n    .on('set', this.setPowerState.bind(this, accessory.context));\r\n\r\n  accessory.on('identify', this.identify.bind(this, accessory.context));\r\n}\r\n\r\n// Method to retrieve initial state\r\ncmdSwitchPlatform.prototype.getInitState = function (accessory) {\r\n  var manufacturer = accessory.context.manufacturer || \"Default-Manufacturer\";\r\n  var model = accessory.context.model || \"Default-Model\";\r\n  var serial = accessory.context.serial || \"Default-SerialNumber\";\r\n\r\n  // Update HomeKit accessory information\r\n  accessory.getService(Service.AccessoryInformation)\r\n    .setCharacteristic(Characteristic.Manufacturer, manufacturer)\r\n    .setCharacteristic(Characteristic.Model, model)\r\n    .setCharacteristic(Characteristic.SerialNumber, serial);\r\n\r\n  // Retrieve initial state if polling is disabled\r\n  if (!accessory.context.polling) {\r\n    accessory.getService(Service.Switch)\r\n      .getCharacteristic(Characteristic.On)\r\n      .getValue();\r\n  }\r\n\r\n  // Configured accessory is reachable\r\n  accessory.updateReachability(true);\r\n}\r\n\r\n// Method to determine current state\r\ncmdSwitchPlatform.prototype.getState = function (thisSwitch, callback) {\r\n  var self = this;\r\n\r\n  // Execute command to detect state\r\n  exec(thisSwitch.state_cmd, function (error, stdout, stderr) {\r\n    var state = error ? false : true;\r\n\r\n    // Error detection\r\n    if (stderr) {\r\n      self.log(\"Failed to determine \" + thisSwitch.name + \" state.\");\r\n      self.log(stderr);\r\n    }\r\n\r\n    callback(stderr, state);\r\n  });\r\n}\r\n\r\n// Method to determine current state\r\ncmdSwitchPlatform.prototype.statePolling = function (name) {\r\n  var accessory = this.accessories[name];\r\n  var thisSwitch = accessory.context;\r\n\r\n  // Clear polling\r\n  clearTimeout(this.polling[name]);\r\n\r\n  this.getState(thisSwitch, function (error, state) {\r\n    // Update state if there's no error\r\n    if (!error && state !== thisSwitch.state) {\r\n      thisSwitch.state = state;\r\n      accessory.getService(Service.Switch)\r\n        .getCharacteristic(Characteristic.On)\r\n        .getValue();\r\n    }\r\n  });\r\n\r\n  // Setup for next polling\r\n  this.polling[name] = setTimeout(this.statePolling.bind(this, name), thisSwitch.interval * 1000);\r\n}\r\n\r\n// Method to determine current state\r\ncmdSwitchPlatform.prototype.getPowerState = function (thisSwitch, callback) {\r\n  var self = this;\r\n\r\n  if (thisSwitch.polling) {\r\n    // Get state directly from cache if polling is enabled\r\n    this.log(thisSwitch.name + \" is \" + (thisSwitch.state ? \"on.\" : \"off.\"));\r\n    callback(null, thisSwitch.state);\r\n  } else {\r\n    // Check state if polling is disabled\r\n    this.getState(thisSwitch, function (error, state) {\r\n      // Update state if command exists\r\n      if (thisSwitch.state_cmd) thisSwitch.state = state;\r\n      if (!error) self.log(thisSwitch.name + \" is \" + (thisSwitch.state ? \"on.\" : \"off.\"));\r\n      callback(error, thisSwitch.state);\r\n    });\r\n  }\r\n}\r\n\r\n// Method to set state\r\ncmdSwitchPlatform.prototype.setPowerState = function (thisSwitch, state, callback) {\r\n  var self = this;\r\n\r\n  var cmd = state ? thisSwitch.on_cmd : thisSwitch.off_cmd;\r\n  var notCmd = state ? thisSwitch.off_cmd : thisSwitch.on_cmd;\r\n  var tout = null;\r\n\r\n  // Execute command to set state\r\n  exec(cmd, function (error, stdout, stderr) {\r\n    // Error detection\r\n    if (error && (state !== thisSwitch.state)) {\r\n      self.log(\"Failed to turn \" + (state ? \"on \" : \"off \") + thisSwitch.name);\r\n      self.log(stderr);\r\n    } else {\r\n      if (cmd) self.log(thisSwitch.name + \" is turned \" + (state ? \"on.\" : \"off.\"));\r\n      thisSwitch.state = state;\r\n      error = null;\r\n    }\r\n\r\n    // Restore switch after 1s if only one command exists\r\n    if (!notCmd && !thisSwitch.state_cmd) {\r\n      setTimeout(function () {\r\n        self.accessories[thisSwitch.name].getService(Service.Switch)\r\n          .setCharacteristic(Characteristic.On, !state);\r\n      }, 1000);\r\n    }\r\n\r\n    if (tout) {\r\n      clearTimeout(tout);\r\n      callback(error);\r\n    }\r\n  });\r\n\r\n  // Allow 1s to set state but otherwise assumes success\r\n  tout = setTimeout(function () {\r\n    tout = null;\r\n    self.log(\"Turning \" + (state ? \"on \" : \"off \") + thisSwitch.name + \" took too long, assuming success.\" );\r\n    callback();\r\n  }, 1000);\r\n}\r\n\r\n// Method to handle identify request\r\ncmdSwitchPlatform.prototype.identify = function (thisSwitch, paired, callback) {\r\n  this.log(thisSwitch.name + \" identify requested!\");\r\n  callback();\r\n}\r\n\r\n// Method to handle plugin configuration in HomeKit app\r\ncmdSwitchPlatform.prototype.configurationRequestHandler = function (context, request, callback) {\r\n  if (request && request.type === \"Terminate\") {\r\n    return;\r\n  }\r\n\r\n  // Instruction\r\n  if (!context.step) {\r\n    var instructionResp = {\r\n      \"type\": \"Interface\",\r\n      \"interface\": \"instruction\",\r\n      \"title\": \"Before You Start...\",\r\n      \"detail\": \"Please make sure homebridge is running with elevated privileges.\",\r\n      \"showNextButton\": true\r\n    }\r\n\r\n    context.step = 1;\r\n    callback(instructionResp);\r\n  } else {\r\n    switch (context.step) {\r\n      case 1:\r\n        // Operation choices\r\n        var respDict = {\r\n          \"type\": \"Interface\",\r\n          \"interface\": \"list\",\r\n          \"title\": \"What do you want to do?\",\r\n          \"items\": [\r\n            \"Add New Switch\",\r\n            \"Modify Existing Switch\",\r\n            \"Remove Existing Switch\"\r\n          ]\r\n        }\r\n\r\n        context.step = 2;\r\n        callback(respDict);\r\n        break;\r\n      case 2:\r\n        var selection = request.response.selections[0];\r\n        if (selection === 0) {\r\n          // Info for new accessory\r\n          var respDict = {\r\n            \"type\": \"Interface\",\r\n            \"interface\": \"input\",\r\n            \"title\": \"New Switch\",\r\n            \"items\": [{\r\n              \"id\": \"name\",\r\n              \"title\": \"Name (Required)\",\r\n              \"placeholder\": \"HTPC\"\r\n            }]\r\n          };\r\n\r\n          context.operation = 0;\r\n          context.step = 3;\r\n          callback(respDict);\r\n        } else {\r\n          var names = Object.keys(this.accessories);\r\n\r\n          if (names.length > 0) {\r\n            // Select existing accessory for modification or removal\r\n            if (selection === 1) {\r\n              var title = \"Witch switch do you want to modify?\";\r\n              context.operation = 1;\r\n              context.step = 3;\r\n            } else {\r\n              var title = \"Witch switch do you want to remove?\";\r\n              context.step = 5;\r\n            }\r\n\r\n            var respDict = {\r\n              \"type\": \"Interface\",\r\n              \"interface\": \"list\",\r\n              \"title\": title,\r\n              \"items\": names\r\n            };\r\n\r\n            context.list = names;\r\n          } else {\r\n            // Error if not switch is configured\r\n            var respDict = {\r\n              \"type\": \"Interface\",\r\n              \"interface\": \"instruction\",\r\n              \"title\": \"Unavailable\",\r\n              \"detail\": \"No switch is configured.\",\r\n              \"showNextButton\": true\r\n            };\r\n\r\n            context.step = 1;\r\n          }\r\n          callback(respDict);\r\n        }\r\n        break;\r\n      case 3:\r\n        if (context.operation === 0) {\r\n          var data = request.response.inputs;\r\n        } else if (context.operation === 1) {\r\n          var selection = context.list[request.response.selections[0]];\r\n          var data = this.accessories[selection].context;\r\n        }\r\n        \r\n        if (data.name) {\r\n          // Add/Modify info of selected accessory\r\n          var respDict = {\r\n            \"type\": \"Interface\",\r\n            \"interface\": \"input\",\r\n            \"title\": data.name,\r\n            \"items\": [{\r\n              \"id\": \"on_cmd\",\r\n              \"title\": \"CMD to Turn On\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"wakeonlan XX:XX:XX:XX:XX:XX\"\r\n            }, {\r\n              \"id\": \"off_cmd\",\r\n              \"title\": \"CMD to Turn Off\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"net rpc shutdown -I XXX.XXX.XXX.XXX -U user%password\"\r\n            }, {\r\n              \"id\": \"state_cmd\",\r\n              \"title\": \"CMD to Check ON State\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"ping -c 2 -W 1 XXX.XXX.XXX.XXX | grep -i '2 received'\"\r\n            }, {\r\n              \"id\": \"polling\",\r\n              \"title\": \"Enable Polling (true/false)\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"false\"\r\n            }, {\r\n              \"id\": \"interval\",\r\n              \"title\": \"Polling Interval\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"1\"\r\n            }, {\r\n              \"id\": \"manufacturer\",\r\n              \"title\": \"Manufacturer\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"Default-Manufacturer\"\r\n            }, {\r\n              \"id\": \"model\",\r\n              \"title\": \"Model\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"Default-Model\"\r\n            }, {\r\n              \"id\": \"serial\",\r\n              \"title\": \"Serial\",\r\n              \"placeholder\": context.operation ? \"Leave blank if unchanged\" : \"Default-SerialNumber\"\r\n            }]\r\n          };\r\n\r\n          context.name = data.name;\r\n          context.step = 4;\r\n        } else {\r\n          // Error if required info is missing\r\n          var respDict = {\r\n            \"type\": \"Interface\",\r\n            \"interface\": \"instruction\",\r\n            \"title\": \"Error\",\r\n            \"detail\": \"Name of the switch is missing.\",\r\n            \"showNextButton\": true\r\n          };\r\n        \r\n          context.step = 1;\r\n        }\r\n\r\n        delete context.list;\r\n        delete context.operation;\r\n        callback(respDict);\r\n        break;\r\n      case 4:\r\n        var userInputs = request.response.inputs;\r\n        var newSwitch = {};\r\n\r\n        // Clone context if switch exists\r\n        if (this.accessories[context.name]) {\r\n          newSwitch = JSON.parse(JSON.stringify(this.accessories[context.name].context));\r\n        }\r\n\r\n        // Setup input for addAccessory\r\n        newSwitch.name = context.name;\r\n        newSwitch.on_cmd = userInputs.on_cmd || newSwitch.on_cmd;\r\n        newSwitch.off_cmd = userInputs.off_cmd || newSwitch.off_cmd;\r\n        newSwitch.state_cmd = userInputs.state_cmd || newSwitch.state_cmd;\r\n        if (userInputs.polling.toUpperCase() === \"TRUE\") {\r\n          newSwitch.polling = true;\r\n        } else if (userInputs.polling.toUpperCase() === \"FALSE\") {\r\n          newSwitch.polling = false;\r\n        }\r\n        newSwitch.interval = userInputs.interval || newSwitch.interval;\r\n        newSwitch.manufacturer = userInputs.manufacturer;\r\n        newSwitch.model = userInputs.model;\r\n        newSwitch.serial = userInputs.serial;\r\n\r\n        // Register or update accessory in HomeKit\r\n        this.addAccessory(newSwitch);\r\n        var respDict = {\r\n          \"type\": \"Interface\",\r\n          \"interface\": \"instruction\",\r\n          \"title\": \"Success\",\r\n          \"detail\": \"The new switch is now updated.\",\r\n          \"showNextButton\": true\r\n        };\r\n\r\n        context.step = 6;\r\n        callback(respDict);\r\n        break;\r\n      case 5:\r\n        // Remove selected accessory from HomeKit\r\n        var selection = context.list[request.response.selections[0]];\r\n        var accessory = this.accessories[selection];\r\n\r\n        this.removeAccessory(accessory);\r\n        var respDict = {\r\n          \"type\": \"Interface\",\r\n          \"interface\": \"instruction\",\r\n          \"title\": \"Success\",\r\n          \"detail\": \"The switch is now removed.\",\r\n          \"showNextButton\": true\r\n        };\r\n\r\n        delete context.list;\r\n        context.step = 6;\r\n        callback(respDict);\r\n        break;\r\n      case 6:\r\n        // Update config.json accordingly\r\n        var self = this;\r\n        delete context.step;\r\n        var newConfig = this.config;\r\n\r\n        // Create config for each switch\r\n        var newSwitches = Object.keys(this.accessories).map(function (k) {\r\n          var accessory = self.accessories[k];\r\n          var data = {\r\n            'name': accessory.context.name,\r\n            'on_cmd': accessory.context.on_cmd,\r\n            'off_cmd': accessory.context.off_cmd,\r\n            'state_cmd': accessory.context.state_cmd,\r\n            'polling': accessory.context.polling,\r\n            'interval': accessory.context.interval,\r\n            'manufacturer': accessory.context.manufacturer,\r\n            'model': accessory.context.model,\r\n            'serial': accessory.context.serial\r\n          };\r\n          return data;\r\n        });\r\n\r\n        newConfig.switches = newSwitches;\r\n        callback(null, \"platform\", true, newConfig);\r\n        break;\r\n    }\r\n  }\r\n}\r\n"}